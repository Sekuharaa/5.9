>>> from news.models import ...


1.Создать двух пользователей (с помощью метода User.objects.create_user('username')).

>>> u1 = User.objects.create_user('User1')
>>> u2 = User.objects.create_user('User2')


2. Создать два объекта модели Author, связанные с пользователями.

>>> a1 = Author.objects.create(user=u1)
>>> a2 = Author.objects.create(user=u2)



3. Добавить 4 категории в модель Category.

>>> nature = Category.objects.create(name='Природа')
>>> culture = Category.objects.create(name='Культура')
>>> science = Category.objects.create(name='Наука')
>>> policy = Category.objects.create(name='Политика')



4. Добавить 2 статьи и 1 новость.

>>> p1 = Post.objects.create(author=a2, title='....', text='...........')

>>> p2 = Post.objects.create(author=a2, title='......', text='..........')

>>> p3 = Post.objects.create(author=a1, type=Post.news, title='...', text='‌.........')


5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

>>> p1.category.add(science)
>>> p1.category.add(nature)
>>> p3.category.add(science)
>>> p2.category.add(culture)


6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

>>> c1 = Comment.objects.create(user=u1, post=p1, text='!!!')
>>> c2 = Comment.objects.create(user=u1, post=p2, text='(((')
>>> с3 = Comment.objects.create(user=u2, post=p3, text=')))')
>>> c4 = Comment.objects.create(user=u2, post=p1, text='Like!')



7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

>>> c1.like()
>>> c1.dislike()
>>> c2.like()
>>> c2.dislike()
>>> c3.like()
>>> c3.dislike()
>>> c4.like()
>>> c4.dislike()
>>> p1.like()
>>> p1.dislike()
>>> p2.like()
>>> p2.dislike()
>>> p3.like()
>>> p3.dislike()



8. Обновить рейтинги пользователей.

>>> u1.update_rating()
>>> u2.update_rating()



9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

>>> Author.objects.order_by("-rating").values("user__username", "rating")[0]




10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.


>>> best_post = Post.objects.order_by("-rating").first() # определение лучшей публикации

>>> best_post.preview() # вывод превью

>>> Post.objects.order_by("-rating").values("creation_time", "author__user__username", "rating", "title")[0] # вывод всего остального


11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.


>>> Comment.objects.filter(post=best_post).values("creation_time", "user__username", "rating", "text")
